<!-- Content wrapper -->
<!-- Jquery js -->
<link rel="stylesheet" href="/assets/vendor/libs/select2/select2.css">

<script type="text/javascript" src="/assets/vendor/libs/jquery/jquery.js"></script>

<!-- Popper js -->
<script src="/assets/vendor/libs/popper/popper.js"></script>

<!-- Bootstrap js -->
<script src="/assets/vendor/js/bootstrap.js"></script>
<link rel="stylesheet" href="/assets/vendor/libs/flatpickr/flatpickr.css" />
<script src="/assets/vendor/libs/flatpickr/flatpickr.js"></script>

<!-- jQuery Validation JS -->
<script type="text/javascript" src="/assets/vendor/libs/jquery/jquery.validate.js"></script>
<link rel="stylesheet" href="/assets/vendor/libs/sweetalert2/sweetalert2.css" />

<script src="/assets/vendor/libs/bootstrap-select/bootstrap-select.js"></script>
<script src="/assets/vendor/libs/select2/select2.js" defer></script>

<div class="content-wrapper">
    <!-- Content -->
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="fw-bold py-3 mb-4"><span class="text-muted fw-light">Doctors/</span> Edit Doctor</h4>
        <!-- Basic Layout & Basic with Icons -->
        <div class="row">
            <!-- Basic with Icons -->
            <div class="col-xxl">
                <div class="card mb-4">

                    <div class="card-header d-flex align-items-center justify-content-between">
                        <h5 class="mb-0">Edit Doctor</h5>
                    </div>

                    <div class="card-body">
                        <form id="edituser" enctype="multipart/form-data" class="row g-3" method="post">

                            <!-- Account Details -->
                            <div class="col-12">
                                <h6 class="fw-semibold"></h6>
                                <hr class="mt-0" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label" for="formValidationFirstName">First Name</label>
                                <input type="text" id="formValidationFirstName" class="form-control"
                                    name="formValidationFirstName" value="{{data.firstName}}" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label" for="formValidationLastName">Last Name</label>
                                <input type="text" id="formValidationLastName" value="{{data.lastName}}"
                                    class="form-control" name="formValidationLastName" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label" for="formValidationEmail">Email</label>
                                <input class="form-control" type="text" value="{{data.email}}" disabled
                                    name="formValidationEmail" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label" for="tel">Phone Number</label>
                                <input type="text" id="tel" class="form-control" value="{{data.phone}}"
                                    name="formValidationMobile" />
                            </div>

                            <div class="col-md-6">
                                <label for="formValidationFile" class="form-label">Profile Pic</label>
                                <input class="form-control" type="file" name="formValidationFile"
                                    accept="image/png, image/jpg, image/jpeg" id="formValidationFile">
                                <label class="form-label">Previous photo :</label>
                                <label>{{data.photoUrl}}</label>
                            </div>

                            <div class="col-md-6 flatpickr">
                                <label class="form-label" for="formValidationDob">DOB</label>
                                <input type="text" class="form-control flatpickr-validation" name="formValidationDob"
                                    id="formValidationDob" value="{{formattedDate}}" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label" for="formValidationPrice">Price</label>
                                <input type="number" class="form-control" name="formValidationPrice"
                                    id="formValidationPrice" value="{{data.price}}" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label" for="formValidationQualifications">Qualifications</label>
                                <input type="text" value="{{data.qualifications}}" class="form-control"
                                    name="formValidationQualifications" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label" for="formValidationSelectDepartment">Department</label>
                                <select id="formValidationSelectDepartment" name="formValidationSelectDepartment"
                                    class="form-select select2" data-allow-clear="true">
                                </select>
                                <label class="form-label" for="formValidationDob">Previous Department:</label>
                                <label>{{data.department}}</label>

                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Gender</label>
                                <div class="form-check custom">
                                    <input type="radio" id="formValidationGender" name="formValidationGender"
                                        class="form-check-input" value="male" {{#compare data.gender '==' 'male'
                                        }}checked="checked" {{/compare}} />
                                    <label class="form-check-label" for="formValidationGender">Male</label>
                                </div>
                                <div class="form-check custom">
                                    <input type="radio" id="formValidationGender2" name="formValidationGender"
                                        class="form-check-input" value="female" {{#compare data.gender '==' 'female'
                                        }}checked="checked" {{/compare}} />
                                    <label class="form-check-label" for="formValidationGender2">Female</label>
                                </div>
                            </div>
                            <input type="hidden" name="doctorUpdate" value="{{data.userId}}" />
                            <div class="row pt-4">
                                <button type="submit" id="addDoctorSubmit" class="btn btn-primary" name="submitButton"
                                    style="width: 30rem; margin: 0 auto;">Submit</button>
                            </div>

                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- / Content -->
    <div class="content-backdrop fade"></div>
</div>
<!-- Content wrapper -->
<script src="/assets/vendor/libs/jquery/jquery.js"></script>
<script src="/assets/vendor/libs/axios/axios.min.js"></script>
<script src="/assets/vendor/libs/sweetalert2/sweetalert2.js"></script>
<script>
    function fetchData() {
        $.ajax({
            url: '/doctors/doctor-department',
            method: 'POST',
            data: {
                code: 778899
            },
            success: function (responseData) {
                populateOptions(responseData);
            },
            error: function (xhr, status, error) {
                console.log('Request failed. Status:', status);
            }
        });
    }

    function populateOptions(data) {
        var selectElement = $('#formValidationSelectDepartment');

        // Clear any existing options
        selectElement.empty();

        // Add a default option
        selectElement.append($('<option>').val("").text("Select Department"));

        // Iterate over the data and create options
        $.each(data, function (index, item) {
            if ('{{data.department}}' === item.title) {
                var option = $('<option selected>').val(item.title).text(item.title);
            }
            else {
                var option = $('<option>').val(item.title).text(item.title);
            }
            selectElement.append(option);
        });
    }

    fetchData()

    document.addEventListener("DOMContentLoaded", async function (e) {
        {

            const t = document.getElementById("edituser"),
                submitButton = document.getElementById('addDoctorSubmit'),
                o = jQuery(t.querySelector('[name="formValidationSelectDepartment"]')),
                i = jQuery(t.querySelector('[name="formValidationDepartment"]')),
                r = FormValidation.formValidation(t, {
                    fields: {
                        formValidationFirstName: {
                            validators: {
                                notEmpty: {
                                    message: "Please enter your First name"
                                },
                                stringLength: {
                                    min: 3,
                                    max: 15,
                                    message: "The name must be more than 6 and less than 30 characters long"
                                },
                                regexp: {
                                    regexp: /^[a-zA-Z]+$/,
                                    message: "The name can only consist of alphabetical, not number"
                                }
                            }
                        },
                        formValidationLastName: {
                            validators: {
                                notEmpty: {
                                    message: "Please enter your Last name"
                                },
                                stringLength: {
                                    min: 3,
                                    max: 15,
                                    message: "The name must be more than 6 and less than 30 characters long"
                                },
                                regexp: {
                                    regexp: /^[a-zA-Z]+$/,
                                    message: "The name can only consist of alphabetical,not number"
                                }
                            }
                        },
                        formValidationEmail: {
                            validators: {
                                notEmpty: {
                                    message: "Please enter your email"
                                },
                                emailAddress: {
                                    message: "The value is not a valid email address"
                                }
                            }
                        },
                        formValidationMobile: {
                            validators: {
                                notEmpty: {
                                    message: "Please Enter Mobile"
                                }
                            }
                        },
                        formValidationDob: {
                            validators: {
                                notEmpty: {
                                    message: "Please Enter your DOB"
                                },
                                date: {
                                    format: "DD/MM/YYYY",
                                    message: "The value is not a valid date"
                                }
                            }
                        },
                        formValidationPrice: {
                            validators: {
                                notEmpty: {
                                    message: "Please Enter charge of Doctor"
                                }
                            }
                        },
                        formValidationSelectDepartment: {
                            validators: {
                                notEmpty: {
                                    message: "Please select your Department"
                                }
                            }
                        },
                        formValidationQualifications: {
                            validators: {
                                notEmpty: {
                                    message: "Please add your Qualifications"
                                }
                            }
                        },
                        formValidationGender: {
                            validators: {
                                notEmpty: {
                                    message: "Please select Gender"
                                }
                            }
                        },
                    },
                    plugins: {
                        trigger: new FormValidation.plugins.Trigger,
                        bootstrap5: new FormValidation.plugins.Bootstrap5({
                            eleValidClass: "",
                            rowSelector: function (e, a) {
                                switch (e) {
                                    case "formValidationFirstName":
                                    case "formValidationLastName":
                                    case "formValidationEmail":
                                    case "formValidationMobile":
                                    case "formValidationFile":
                                    case "formValidationDob":
                                    case "formValidationPrice":
                                    case "formValidationQualifications":
                                    case "formValidationSelectDepartment":
                                    case "formValidationGender":
                                        return ".col-md-6";
                                    case "formValidationPlan":
                                        return ".col-xl-3";
                                    case "formValidationCheckbox":
                                        return ".col-12";
                                    default:
                                        return ".row"
                                }
                            }
                        }),
                        submitButton: new FormValidation.plugins.SubmitButton,
                        autoFocus: new FormValidation.plugins.AutoFocus
                    },
                    init: e => {
                        e.on("plugins.message.placed", function (e) {
                            e.element.parentElement.classList.contains("input-group") && e.element.parentElement.insertAdjacentElement("afterend", e.messageElement), e.element.parentElement.parentElement.classList.contains("custom-option") && e.element.closest(".row").insertAdjacentElement("afterend", e.messageElement)
                        })
                    }
                });

            r.on('core.form.valid', function (e) {
                try {
                    let demoForm = document.getElementById('edituser')
                    var doctorFormData = new FormData();
                    // Append the text fields
                    doctorFormData.append("f", "t")
                    doctorFormData.append('firstName', demoForm.querySelector('[name="formValidationFirstName"]').value);
                    doctorFormData.append('doctorId', demoForm.querySelector('[name="doctorUpdate"]').value);
                    doctorFormData.append('lastName', demoForm.querySelector('[name="formValidationLastName"]').value);
                    doctorFormData.append('email', demoForm.querySelector('[name="formValidationEmail"]').value);
                    doctorFormData.append('phone', demoForm.querySelector('[name="formValidationMobile"]').value);
                    doctorFormData.append('dateOfBirth', demoForm.querySelector('[name="formValidationDob"]').value);
                    doctorFormData.append('price', demoForm.querySelector('[name="formValidationPrice"]').value);
                    doctorFormData.append('qualification', demoForm.querySelector('[name="formValidationQualifications"]').value);
                    doctorFormData.append('department', demoForm.querySelector('select[name="formValidationSelectDepartment"]').value);
                    doctorFormData.append('gender', demoForm.querySelector('input[name="formValidationGender"]:checked').value);
                    const image = demoForm.querySelector('[name="formValidationFile"]');
                    if (image.files.length > 0) {
                        doctorFormData.append('avatar', image.files[0]);
                    }

                    new Response(doctorFormData).text().then(console.log)
                    axios.post('/doctors/edit-doctor', doctorFormData, {
                        headers: {
                            'Content-Type': 'multipart/form-data'
                        }
                    }).then(function (response) {
                        if (response.data.type === 'success') { // Check response.data.type instead of response.type
                            Swal.fire({
                                icon: "success",
                                title: response.data.message,
                                showConfirmButton: !1,
                                timer: 1500,
                                customClass: {
                                    confirmButton: "btn btn-primary"
                                },
                                buttonsStyling: !1,
                            }).then(function () {
                                window.location.href = window.location.href;
                            });
                        } else {
                            Swal.fire({
                                icon: "error",
                                title: response.data.message,
                                showConfirmButton: !1,
                                timer: 1500,
                                customClass: {
                                    confirmButton: "btn btn-primary"
                                },
                                buttonsStyling: !1,
                            });
                        }
                    })
                } catch (error) {
                    console.error(error);
                }
            })

            var a, n;
            flatpickr(t.querySelector('[name="formValidationDob"]'), {
                enableTime: !1,
                dateFormat: "d/m/Y",
                onChange: function () {
                    r.revalidateField("formValidationDob")
                }
            }),
                o.length && (o.wrap('<div class="position-relative"></div>'), o.select2({
                    placeholder: "Select Department",
                    dropdownParent: o.parent()
                })

                    .on("change.select2", function () {
                        r.revalidateField("formValidationSelectDepartment")
                    }))
        }
    });
</script>