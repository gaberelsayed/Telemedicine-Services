{{!--
<link rel="stylesheet" href="https://cdn.dhtmlx.com/scheduler/edge/dhtmlxscheduler.css"> --}}
<link rel="stylesheet" href="/assets/vendor/libs/dhtmlx/dhtmlxscheduler_material.css">
<script src="/assets/vendor/libs/dhtmlx/dhtmlxscheduler.js"></script>
<script src="/assets/vendor/libs/jquery/jquery.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<style>
    html,
    body {
        margin: 0px;
        padding: 0px;
        height: 100%;
        overflow: hidden;
    }
</style>
<script>
    function init(from, to) {
        // Set the date format for XML data
        scheduler.config.xml_date = "%Y-%m-%d %H:%i";

        // Set the time format to display in AM/PM format
        scheduler.config.time_format = "12"; // AM/PM format

        // Set the start and end time of the day
        scheduler.config.first_hour = from;
        scheduler.config.last_hour = to;
        scheduler.config.start_date = moment.utc(); // 6:00 PM

        // Initialize the scheduler with the date for the upcoming 1 week
        const startDate = moment.utc();
        const endDate = new Date();
        endDate.setDate(endDate.getDate() + 7); // Add 7 days to get the end date for 1 week from today
        scheduler.config.end_date = endDate; // 6:00 PM

        scheduler.init("scheduler_here", startDate, "week");

        // Set the scheduler to start on the next Monday
        scheduler.config.start_on_monday = true;

        // Enables dynamic loading for the scheduler
        scheduler.setLoadMode("day");

        // Load data from the backend
        scheduler.load("/doctor/events", "json");

        scheduler.plugins({
            recurring: true
        });

        const dp = scheduler.createDataProcessor({
            url: '/doctor/events/',
            mode: "REST",
        });

        // Set data exchange mode
        dp.setTransactionMode("REST");
        dp.init(scheduler);
        dp.setTransactionMode("POST", false);

    }
</script>

<body>
    <div id="scheduler_here" class="dhx_cal_container" style='width:100%; height:100%;'>
        <div class="dhx_cal_navline">
            <div class="dhx_cal_prev_button">&nbsp;</div>
            <div class="dhx_cal_next_button">&nbsp;</div>
            <div class="dhx_cal_today_button"></div>
            <div class="dhx_cal_date"></div>
        </div>
        <div class="dhx_cal_header">
        </div>
        <div class="dhx_cal_data">
        </div>
    </div>
</body>
<script>
    // Convert time string to Date object
    const consultationStartTime = "{{ doctor.onlineConsultationTimeFrom }}"; // Assuming the format is "08:00"
    const consultationEndTime = "{{ doctor.onlineConsultationTimeTo }}";   // Assuming the format is "21:00"

    function convertTimeStringToHoursMinutes(timeString) {
        const [hours, minutes] = timeString.split(":");
        return {
            hours: parseInt(hours, 10),
            minutes: parseInt(minutes, 10)
        };
    }

    // Trigger the scheduler initialization when the page loads
    window.onload = function () {
        const fromTime = convertTimeStringToHoursMinutes(consultationStartTime);
        const toTime = convertTimeStringToHoursMinutes(consultationEndTime);

        // Initialize the scheduler with the extracted hours and minutes
        init(fromTime.hours, toTime.hours);
    };
</script>