<div class="content-wrapper">
    <!-- Content -->
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="fw-bold py-3 mb-4"><span class="text-muted fw-light">Event/</span> Add-Event</h4>
        <!-- Basic Layout & Basic with Icons -->
        <div class="row">
            <!-- Basic with Icons -->
            <div class="col-xxl">
                <div class="card mb-4">

                    <div class="card-header d-flex align-items-center justify-content-between">
                        <h5 class="mb-0">Add-Event</h5>
                    </div>
                    <div class="card-body">
                        <form id="add-event" class="row g-3" method="post" enctype="multipart/form-data">

                            <div class="col-md-6">
                                <label class="form-label" for="Title">Event Title</label>
                                <input type="text" id="Title" value="" class="form-control" placeholder="Title"
                                    name="title" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label" for="basic-default-upload-file">Event Cover Photo</label>
                                <input type="file" class="form-control" name="event_photo" />
                            </div>

                            <label class="col-sm-2 col-form-label" for="basic-default-message">Event Content</label>
                            <div id="editor-container"></div>
                            <input type="hidden" name="quill-html" id="quill-html">

                            <div class="row pt-4">
                                <button type="submit" id="submit" class="btn btn-primary" name="submitButton"
                                    style="width: 30rem; margin: 0 auto;">Submit</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- / Content -->
    <div class="content-backdrop fade"></div>
</div>
<script src="../../assets/vendor/libs/quill/quill.js"></script>
<script src="../../assets/vendor/libs/quill/image-resize.js"></script>
<script>
    const editor = new Quill('#editor-container', {
        modules: {
            imageResize: {
                displaySize: true
            },
            toolbar: [
                [{ font: [] }, { size: [] }],
                ["bold", "italic", "underline", "strike"],
                [{ color: [] }, { background: [] }],
                [{ script: "super" }, { script: "sub" }],
                [{ align: [] }],
                [{ header: "1" }, { header: "2" }, "blockquote", "code-block"],
                [
                    { list: "ordered" },
                    { list: "bullet" },
                    { indent: "-1" },
                    { indent: "+1" },
                ],
                [{ direction: "rtl" }],
                ["link", "image", "video", "formula"],
                ["clean"],
            ],
        },
        placeholder: 'Write an epic...',
        theme: 'snow'
    });

    /**
  * Step1. select local image
  *
  */
    function selectLocalImage() {
        const input = document.createElement('input');
        input.setAttribute('type', 'file');
        input.setAttribute('value', 'event_file');
        input.click();

        // Listen upload local image and save to server
        input.onchange = () => {
            const file = input.files[0];

            // file type is only image.
            if (/^image\//.test(file.type)) {
                saveToServer(file);
            } else {
                console.warn('You could only upload images.');
            }
        };
    }

    /**
     * Step2. save to server
     *
     * @param {File} file
     */
    function saveToServer(file) {
        const fd = new FormData();
        fd.append('image', file);

        const xhr = new XMLHttpRequest();
        xhr.open('POST', 'http://localhost:3000/upload/image', true);
        xhr.onload = () => {
            if (xhr.status === 200) {
                // this is callback data: url
                const url = JSON.parse(xhr.responseText).data;
                insertToEditor(url);
            }
        };
        xhr.send(fd);
    }

    /**
     * Step3. insert image url to rich editor.
     *
     * @param {string} url
     */
    function insertToEditor(url) {
        // push image url to rich editor.
        const range = editor.getSelection();
        editor.insertEmbed(range.index, 'image', `http://localhost:3000${url}`);
    }

    // quill editor add image handler
    editor.getModule('toolbar').addHandler('image', () => {
        selectLocalImage();
    });


    // Function to get the first paragraph
    function getFirstParagraph() {
        const quillContent = editor.root.innerHTML;
        const parser = new DOMParser();
        const doc = parser.parseFromString(quillContent, 'text/html');
        const firstParagraph = doc.querySelector('p');

        if (firstParagraph) {
            return firstParagraph.textContent;
        } else {
            return "No paragraphs found.";
        }
    }
</script>
<!-- Content wrapper -->
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="/assets/vendor/libs/sweetalert2/sweetalert2.js"></script>

<script src="/assets/vendor/libs/jquery/jquery.js"></script>
<script src="/assets/vendor/libs/jquery/jquery.validate.js"></script>
<script src="/assets/vendor/libs/jquery/additional-methods.min.js"></script>

<script>
    $(document).ready(function () {
        jQuery.validator.setDefaults({
            // This will ignore all hidden elements alongside `contenteditable` elements
            // that have no `name` attribute
            ignore: ":hidden, [contenteditable='true']:not([name])"
        });
        jQuery.validator.addMethod("domain", function (value, element) {
            return this.optional(element) || /^[a-zA-Z0-9\-]+(\.[a-zA-Z0-9\-]+)*\.[a-zA-Z]{2,}$/.test(value);
        }, "Please specify the correct domain for your documents");

        $('#add-event').validate({
            rules: {
                title: {
                    required: true,
                },
                description: {
                    required: true,
                },
                date: {
                    required: true,
                },
                event_photo: {
                    required: true,
                },
            },
            messages: {
                title: {
                    required: '*Please enter title ',
                },
                description: {
                    required: '*Please enter description',
                },
                date: {
                    required: '*Please enter Date',
                },
                photo: {
                    required: '*Please enter chose photo',
                },
            },
            highlight: function (element, errorClass, validClass) {
                $(element).closest('.form-group').addClass(errorClass).removeClass(validClass);
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).closest('.form-group').removeClass(errorClass).addClass(validClass);
            },
            errorPlacement: function (error, element) {
                error.insertAfter(element);
            },
            submitHandler: function (form) {
                if ($("#submit").valid()) {
                    // Get HTML content
                    var html = editor.root.innerHTML;

                    // Copy HTML content in hidden form
                    $('#quill-html').val(html)

                    var eventForm = $('#add-event');
                    var eventFormData = new FormData();
                    eventFormData.append('title', eventForm.find('[name="title"]').val());
                    eventFormData.append('description', eventForm.find('[name="quill-html"]').val());
                    const firstParagraph = getFirstParagraph();
                    eventFormData.append('sort_description', firstParagraph);
                    const image = eventForm.find('[name="event_photo"]').prop('files')[0];
                    eventFormData.append('event_photo', image);

                    $.ajax({
                        url: '/events/add-event',
                        type: 'POST',
                        data: eventFormData,
                        cache: false,
                        contentType: false,
                        processData: false,
                        success: function (response) {
                            if (response.type === 'success') {
                                Swal.fire({
                                    icon: "success",
                                    title: response.message,
                                    showConfirmButton: !1,
                                    timer: 1500,
                                    customClass: {
                                        confirmButton: "btn btn-primary"
                                    },
                                    buttonsStyling: !1,
                                }).then(function () {
                                    window.location.href = window.location.href;
                                });
                            }
                        },
                        error: function (error) {
                            // Handle the error if the AJAX request fails
                            console.error('Error saving event post:', error);
                        }
                    });
                }
            }
        });
    });
</script>